{"version":3,"sources":["components/CloseButton.js","components/TodoItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["CloseButton","onClick","this","props","handleClick","React","Component","TodoItem","chekForDone","e","state","checked","setState","console","log","className","style","background","type","onChange","item","removeItem","List","items","map","index","key","mainTodo","handleInput","text","target","value","submitHendle","listItem","listItems","preventDefault","splice","color","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAWeA,G,sLALP,OACA,4BAAQC,QAASC,KAAKC,MAAMC,aAA5B,S,GAJkBC,IAAMC,YCCVC,E,YACnB,WAAYJ,GAAO,IAAD,8BACd,4CAAMA,KAKVK,YAAc,SAACC,GACd,EAAKC,MAAMC,QACR,EAAKC,SAAS,CACZD,SAAS,IAGX,EAAKC,SAAS,CACZD,SAAS,IAGbE,QAAQC,IAAI,EAAKJ,MAAMC,UAdrB,EAAKD,MAAO,CACRC,SAAS,GAHC,E,sEAoBb,OACI,wBAAII,UAAU,KAAKC,MAAQd,KAAKQ,MAAMC,QAA6B,CAACM,WAAW,sBAAhC,CAACA,WAAW,SACtD,2BAAOC,KAAK,WAAWC,SAAUjB,KAAKM,cACtC,8BAAON,KAAKC,MAAMiB,MAClB,kBAAC,EAAD,CAAaL,UAAU,cAAcX,YAAaF,KAAKC,MAAMkB,kB,GAzBtChB,IAAMC,WCiB/BgB,E,iLAfL,IAAD,OACR,OACW,wBAAIP,UAAU,MAGNb,KAAKC,MAAMoB,MAAMC,KAAI,SAACJ,EAAMK,GAAP,OAClB,kBAAC,EAAD,CAAWL,KAAMA,EAAMM,IAAKD,EAAOJ,WAAY,kBAAI,EAAKlB,MAAMkB,WAAWI,c,GAP7EpB,IAAMC,WCuDVqB,E,YAvDf,WAAYxB,GAAO,IAAD,8BAChB,4CAAMA,KAQRyB,YAAa,SAACnB,GACd,EAAKG,SAAS,CACZiB,KAAMpB,EAAEqB,OAAOC,SAXC,EAelBC,aAAc,SAACvB,GACb,IAAIoB,EAAO,EAAKnB,MAAMmB,KAClBI,EAAW,EAAKvB,MAAMwB,UAE3BzB,EAAE0B,iBACD,EAAKvB,SAAS,CACbsB,UAAU,GAAD,mBAAMD,GAAN,CAAiBJ,IAC1BA,KAAK,MAtBU,EA4BlBR,WAAW,SAACZ,GACX,EAAKG,SAAS,CACZqB,SAAU,EAAKvB,MAAMwB,UAAUE,OAAO3B,EAAG,MA5B1C,EAAKC,MAAO,CACXmB,KAAM,GACPK,UAAU,GACRvB,SAAS,GALK,E,sEA2ChB,OACA,yBAAKI,UAAU,aACd,wBAAIC,MATK,CACTC,WAAW,OACXoB,MAAO,QACPC,OAAQ,IAMR,iBACK,0BAAMvB,UAAU,OACjB,2BAAOG,KAAK,OAAOC,SAAUjB,KAAK0B,YAAaG,MAAO7B,KAAKQ,MAAMmB,OACjE,4BAAQ5B,QAASC,KAAK8B,cAAtB,QAEL,kBAAC,EAAD,CAAOX,WAAYnB,KAAKmB,WAAYE,MAAOrB,KAAKQ,MAAMwB,UACrD1B,YAAaN,KAAKM,YAAaG,QAAST,KAAKQ,MAAMC,e,GApD/BN,IAAMC,WCQTiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.52a49135.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nclass CloseButton extends React.Component{\r\n\r\nrender(){\r\n        return(\r\n        <button onClick={this.props.handleClick}>X</button>\r\n        )\r\n    }\r\n}\r\nexport default CloseButton;\r\n\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport CloseButton from  './CloseButton';\r\n \r\n export default class TodoItem extends  React.Component{\r\n   constructor(props){\r\n       super(props)\r\n       this.state ={\r\n           checked: false\r\n       }\r\n   }\r\n   chekForDone = (e) =>{\r\n if(this.state.checked){\r\n       this.setState({\r\n         checked: false\r\n       })\r\n     }else{\r\n       this.setState({\r\n         checked: true\r\n       })\r\n     }\r\n     console.log(this.state.checked)\r\n   }\r\n   \r\n    render(){\r\n        return(\r\n            <li className='li' style={!this.state.checked? {background:'blue'}:{background:'rgb(102, 102, 180)'} } >\r\n                 <input type=\"checkbox\" onChange={this.chekForDone} /> \r\n                 <span>{this.props.item}</span>\r\n                 <CloseButton className=\"closeButton\" handleClick={this.props.removeItem} /> \r\n            </li>\r\n        )\r\n    }\r\n   \r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\nclass List extends React.Component {\r\n render(){\r\n return(\r\n            <ul className='ul'>\r\n\r\n                {\r\n                    this.props.items.map((item, index) => \r\n                       <TodoItem  item={item} key={index} removeItem={()=>this.props.removeItem(index)} >\r\n                     </TodoItem>\r\n                    )\r\n                }\r\n                \r\n            </ul>\r\n         )\r\n    }\r\n }\r\nexport default List\r\n","import React from 'react';\nimport './App.css';\n import List from './components/List';\n \nclass mainTodo extends React.Component{\nconstructor(props){\n  super(props)\n  this.state=({\n   text: '',\n  listItems:[],\n    checked: true\n    })\n}\n\nhandleInput =(e)=>{\nthis.setState({\n  text: e.target.value,\n  })\n\n }\nsubmitHendle =(e)=>{\n  let text = this.state.text;\n  let listItem = this.state.listItems;\n  \n e.preventDefault();\n  this.setState({\n   listItems: [...listItem,  text ],\n   text:''\n })\n \n }\n \n\nremoveItem=(e)=>{\n this.setState({\n   listItem: this.state.listItems.splice(e, 1)\n })\n}\n\n\nrender(){\n const col ={\n   background:'blue',\n   color: 'white',\n   margin: 0\n\n}\n\n  return(\n  <div className='container' >\n   <h1 style={col} >My todo list </h1>\n        <form className=\"App\">\n       <input type=\"text\" onChange={this.handleInput} value={this.state.text} />\n       <button onClick={this.submitHendle}>Add</button>\n    </form>\n  <List  removeItem={this.removeItem} items={this.state.listItems}\n   chekForDone={this.chekForDone} checked={this.state.checked} />\n</div>)\n  }\n}\nexport default mainTodo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}